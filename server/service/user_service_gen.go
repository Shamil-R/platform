// Code generated by platform, DO NOT EDIT.

package service

import (
	context "context"
	model "gitlab/nefco/platform/server/model"
	sqlx "github.com/jmoiron/sqlx"
)

type userService struct {
}

func (s *userService) CreateUser(ctx context.Context, data model.UserCreateInput) (model.User, error) {
	tx := ctx.Value("tx").(*sqlx.Tx)

	query := `
		INSERT INTO table (
			field
		) VALUES (
			value
		)
	`

}

func (s *userService) UpdateUser(ctx context.Context, data model.UserUpdateInput, where model.UserWhereUniqueInput) (*model.User, error) {
panic("not implemented update")

}

func (s *userService) DeleteUser(ctx context.Context, where model.UserWhereUniqueInput) (*model.User, error) {
panic("not implemented delete")

}

func (s *userService) User(ctx context.Context, where model.UserWhereUniqueInput) (*model.User, error) {
panic("not implemented item")

}

func (s *userService) Users(ctx context.Context, where *model.UserWhereInput) ([]*model.User, error) {
panic("not implemented collection")

}
