// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
)

type Material struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type MaterialCreateInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type MaterialUpdateInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type MaterialWhereInput struct {
	ID *string `json:"id"`
}

type MaterialWhereUniqueInput struct {
	ID *string `json:"id"`
}

type RoleObject struct {
	ID     int        `json:"id"`
	Object string     `json:"object"`
	Access RoleAccess `json:"access"`
}

type RoleObjectCreateInput struct {
	ID     int        `json:"id"`
	Object string     `json:"object"`
	Access RoleAccess `json:"access"`
}

type RoleObjectUpdateInput struct {
	ID     int        `json:"id"`
	Object string     `json:"object"`
	Access RoleAccess `json:"access"`
}

type RoleObjectWhereInput struct {
	ID *string `json:"id"`
}

type RoleObjectWhereUniqueInput struct {
	ID *string `json:"id"`
}

type User struct {
	ID        int          `json:"id"`
	Name      string       `json:"name"`
	Roles     []RoleObject `json:"roles"`
	Materials []Material   `json:"materials"`
}

type UserCreateInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type UserUpdateInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type UserWhereInput struct {
	ID *string `json:"id"`
}

type UserWhereUniqueInput struct {
	ID *string `json:"id"`
}

type RoleAccess string

const (
	RoleAccessCreate RoleAccess = "CREATE"
	RoleAccessRead   RoleAccess = "READ"
	RoleAccessUpdate RoleAccess = "UPDATE"
	RoleAccessDelete RoleAccess = "DELETE"
)

func (e RoleAccess) IsValid() bool {
	switch e {
	case RoleAccessCreate, RoleAccessRead, RoleAccessUpdate, RoleAccessDelete:
		return true
	}
	return false
}

func (e RoleAccess) String() string {
	return string(e)
}

func (e *RoleAccess) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleAccess(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleAccess", str)
	}
	return nil
}

func (e RoleAccess) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
