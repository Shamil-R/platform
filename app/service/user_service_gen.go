// Code generated by platform, DO NOT EDIT.

package service

import (
	"context"

	model "gitlab/nefco/platform/app/model"

	mssql "gitlab/nefco/platform/codegen/generate/service/mssql"
)

type UserMutationService interface {
	CreateUser(ctx context.Context, data model.UserCreateInput) (model.User, error)
	UpdateUser(ctx context.Context, data model.UserUpdateInput, where model.UserWhereUniqueInput) (*model.User, error)
	DeleteUser(ctx context.Context, where model.UserWhereUniqueInput) (*model.User, error)
	UpsertUser(ctx context.Context, where model.UserWhereUniqueInput, create model.UserCreateInput, update model.UserUpdateInput) (*model.User, error)
}

type userMutationService struct{}

func NewUserMutationService() *userMutationService {
	return &userMutationService{}
}

func (s *userMutationService) CreateUser(ctx context.Context, data model.UserCreateInput) (model.User, error) {
	res := model.User{}

	if err := mssql.Create(ctx, &res); err != nil {
		return res, err
	}

	return res, nil
}

func (s *userMutationService) UpdateUser(ctx context.Context, data model.UserUpdateInput, where model.UserWhereUniqueInput) (*model.User, error) {
	res := &model.User{}

	if err := mssql.Update(ctx, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (s *userMutationService) DeleteUser(ctx context.Context, where model.UserWhereUniqueInput) (*model.User, error) {
	res := &model.User{}

	if err := mssql.Delete(ctx, res); err != nil {
		return nil, err
	}

	return res, nil
	
}

func (s *userMutationService) UpsertUser(ctx context.Context, where model.UserWhereUniqueInput, create model.UserCreateInput, update model.UserUpdateInput) (*model.User, error) {
	panic("not implemented")
}

type UserQueryService interface {
	User(ctx context.Context, where model.UserWhereUniqueInput) (*model.User, error)
	Users(ctx context.Context, where *model.UserWhereInput, skip *int, first *int, last *int) ([]*model.User, error)
}

type userQueryService struct{}

func NewUserQueryService() *userQueryService {
	return &userQueryService{}
}

func (s *userQueryService) User(ctx context.Context, where model.UserWhereUniqueInput) (*model.User, error) {
	res := &model.User{}

	if err := mssql.Item(ctx, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (s *userQueryService) Users(ctx context.Context, where *model.UserWhereInput, skip *int, first *int, last *int) ([]*model.User, error) {
	res := []*model.User{}

	if err := mssql.Collection(ctx, &res); err != nil {
		return nil, err
	}

	return res, nil
}

type UserRelationService interface {
	Materials(ctx context.Context, obj *model.User, where *model.MaterialWhereInput) ([]model.Material, error)
}

type userRelationService struct{}

func NewUserRelationService() *userRelationService {
	return &userRelationService{}
}

func (s *userRelationService) Materials(ctx context.Context, obj *model.User, where *model.MaterialWhereInput) ([]model.Material, error) {
	res := []model.Material{}

	if err := mssql.Relation(ctx, obj.ID, &res); err != nil {
		return res, err
	}

	return res, nil
}
