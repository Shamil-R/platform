## Code generated by platform, DO NOT EDIT.

{{ range $s, $def := .Types }}
type {{ .Name }} {
    {{- range $, $field := .Fields }}
    {{ .Name }}: {{ .Type }}
    {{- end }}
}

input {{ .Name }}CreateInput {
    {{- range $, $field := .Fields }}
    {{- if and (ne .Type.Name "ID") (not .Type.Elem) }}
    {{ .Name }}: {{ .Type }}
    {{- end }}
    {{- end }}
}

input {{ .Name }}UpdateInput {
    {{- range $, $field := .Fields }}
    {{- if and (ne .Type.Name "ID") (not .Type.Elem) }}
    {{ .Name }}: {{ .Type }}
    {{- end }}
    {{- end }}
}

input {{ .Name }}WhereUniqueInput {
    id: ID
}

input {{ .Name }}WhereInput {
    id: ID
}
{{ end }}

type Mutation {
{{- range $s, $def := .Types }}
    create{{ .Name }}(data: {{ .Name }}CreateInput!): {{ .Name }}!
    update{{ .Name }}(data: {{ .Name }}UpdateInput!, where: {{ .Name }}WhereUniqueInput!): {{ .Name }}
    delete{{ .Name }}(where: {{ .Name }}WhereUniqueInput!): {{ .Name }}
{{- end }}
}

type Query {
{{- range $s, $def := .Types }}
    {{ lower .Name }}(where: {{ .Name }}WhereUniqueInput!): {{ .Name }}
    {{ lower .Name | plural }}(where: {{ .Name }}WhereInput): [{{ .Name }}]!
{{- end }}
}
