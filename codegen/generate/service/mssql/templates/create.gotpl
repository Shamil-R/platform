	{{- $table := lower .Name }}
	{{- $fields := .Fields.ForCreateInput}}
	{{- $fieldsLen := len $fields }}
	tx, err := mssql.Begin(ctx)
	if err != nil {
		return nil, err
	}

	queryInsert := `
		INSERT INTO [{{ $table }}] (
			{{- range $i, $field := $fields }}
			[{{ .Name }}]
			{{- if gt (sub $fieldsLen $i) 1 }},{{ end }}
			{{- end }}
		) VALUES (
			{{- range $i, $field := $fields }}
			:{{ .Name }}
			{{- if gt (sub $fieldsLen $i) 1 }},{{ end }}
			{{- end }}
		)
	`

	argInsert := map[string]interface{}{
		{{- range $i, $field := $fields }}
		"{{ .Name }}": data.{{ title .Name }},
		{{- end }}
	}

	resInsert, err := tx.NamedExec(queryInsert, argInsert)
	if err != nil {
		return nil, err
	}

	id, err := resInsert.LastInsertId()
	if err != nil {
		return nil, err
	}

	querySelect := `
		SELECT * FROM [{{ $table }}]
		WHERE id = :id
	`

	argSelect := map[string]interface{}{
		"id": id,
	}

	stmt, err := tx.PrepareNamed(querySelect)
	if err != nil {
		return nil, err
	}

	resSelect := &model.{{ .Name }}{}

	if err := stmt.Get(resSelect, argSelect); err != nil {
		return nil, err
	}

	return resSelect, nil